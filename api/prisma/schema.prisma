generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  refreshToken String    @unique
  expiresAt    DateTime
  userId       Int

  user User @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  email     String    @unique

  refreshTokens      RefreshToken[]
  campaigns          Campaign[]
  sessions           Session[]
  comments           Comment[]
  Conjuration        Conjuration[]
  ConjurationRequest ConjurationRequest[]

  @@map("users")
}

model Conjuration {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  originalId           Int?
  userId               Int?
  campaignId           Int?
  conjurationRequestId Int?

  name          String
  conjurerCode  String
  imageUri      String?
  imageAIPrompt String?
  data          Json
  tags          String[]

  user               User?               @relation(fields: [userId], references: [id])
  campaign           Campaign?           @relation(fields: [campaignId], references: [id])
  original           Conjuration?        @relation("OriginalConjuration", fields: [originalId], references: [id])
  copies             Conjuration[]       @relation("OriginalConjuration")
  comments           Comment[]
  conjurationRequest ConjurationRequest? @relation(fields: [conjurationRequestId], references: [id])

  @@map("conjurations")
}

model ConjurationRequest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId        Int
  campaignId    Int
  generatorCode String
  count         Int
  args          Json

  user         User?         @relation(fields: [userId], references: [id])
  conjurations Conjuration[]

  @@map("conjuration_requests")
}

model Campaign {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId    Int

  name                String
  description         String?
  rpgSystemCode       String
  publicAdventureCode String?

  user         User          @relation(fields: [userId], references: [id])
  sessions     Session[]
  comments     Comment[]
  locations    Location[]
  conjurations Conjuration[]

  @@map("campaigns")
}

model Session {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId     Int
  campaignId Int

  when        DateTime
  summary     String?
  transcript  String?
  description String?

  user     User      @relation(fields: [userId], references: [id])
  campaign Campaign  @relation(fields: [campaignId], references: [id])
  comments Comment[]

  @@map("sessions")
}

model Comment {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt     DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId        Int
  sessionId     Int?
  campaignId    Int?
  characterId   Int?
  conjurationId Int?

  text String

  user                 User         @relation(fields: [userId], references: [id])
  session              Session?     @relation(fields: [sessionId], references: [id])
  campaign             Campaign?    @relation(fields: [campaignId], references: [id])
  conjurations         Conjuration? @relation(fields: [conjurationId], references: [id])
  conjurationRequestId Int?

  @@map("comments")
}

model Location {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  name        String
  description String?
  imageUri    String?
  tags        String[]
  campaignId  Int

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@map("locations")
}

model Tag {
  name      String    @id
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  usageCount Int

  @@unique([name])
  @@index([name], name: "tags_name")
  @@map("tags")
}
