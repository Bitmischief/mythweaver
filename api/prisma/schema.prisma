generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  refreshToken String    @unique
  expiresAt    DateTime
  userId       Int

  user User @relation(fields: [userId], references: [id])

  @@map("refresh-tokens")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  email     String    @unique

  characters    Character[]
  refreshTokens RefreshToken[]
  campaigns     Campaign[]
  sessions      Session[]
  comments      Comment[]

  @@map("users")
}

model Character {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId     Int
  campaignId Int

  name          String
  looks         String?
  personality   String?
  background    String?
  imageUri      String?
  quests        String[]
  tags          String[]
  imageAIPrompt String?

  user     User      @relation(fields: [userId], references: [id])
  campaign Campaign  @relation(fields: [campaignId], references: [id])
  comments Comment[]

  @@map("characters")
}

model Campaign {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId    Int

  name                String
  description         String?
  rpgSystemCode       String
  publicAdventureCode String?

  user      User        @relation(fields: [userId], references: [id])
  sessions  Session[]
  comments  Comment[]
  locations Location[]
  Character Character[]

  @@map("campaigns")
}

model Session {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId     Int
  campaignId Int

  when        DateTime
  summary     String?
  transcript  String?
  description String?

  user     User      @relation(fields: [userId], references: [id])
  campaign Campaign  @relation(fields: [campaignId], references: [id])
  comments Comment[]

  @@map("sessions")
}

model Comment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId      Int
  sessionId   Int?
  campaignId  Int?
  characterId Int?

  text String

  user      User       @relation(fields: [userId], references: [id])
  session   Session?   @relation(fields: [sessionId], references: [id])
  campaign  Campaign?  @relation(fields: [campaignId], references: [id])
  character Character? @relation(fields: [characterId], references: [id])

  @@map("comments")
}

model Location {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  name        String
  description String?
  imageUri    String?
  tags        String[]
  campaignId  Int

  campaign Campaign @relation(fields: [campaignId], references: [id])

  @@map("locations")
}
