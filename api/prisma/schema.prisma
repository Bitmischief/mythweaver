generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  refreshToken String    @unique
  expiresAt    DateTime
  userId       Int

  user User @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

enum BillingPlan {
  TRIAL
  FREE
  BASIC
  PRO
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  email     String    @unique

  earlyAccessCutoffAt             DateTime        @default("2023-10-17T08:00:00.000Z")
  trialEndsAt                     DateTime?
  earlyAccessExempt               Boolean         @default(false)
  billingCustomerId               String?
  subscriptionPaidThrough         DateTime?
  plan                            BillingPlan     @default(TRIAL)
  planInterval                    BillingInterval @default(MONTHLY)
  username                        String
  imageCredits                    Int             @default(0)
  lifetimeAccess                  Boolean         @default(false)
  preorderRedemptionCoupon        String?
  preorderRedemptionStripePriceId String?
  amountSupportingArtistsUsd      Float           @default(0)
  onboarded                       Boolean         @default(false)

  initialTrackingData Json?

  refreshTokens            RefreshToken[]
  campaigns                Campaign[]
  sessions                 Session[]
  conjurations             Conjuration[]
  conjurationRequests      ConjurationRequest[]
  campaignMemberships      CampaignMember[]
  characters               Character[]
  ConjurationSave          ConjurationSave[]
  magicLinks               MagicLink[]
  images                   Image[]
  sessionTranscriptions    SessionTranscription[]
  ImageCreditAuditLog      ImageCreditAuditLog[]
  ConjurationRelationships ConjurationRelationships[]
  Collections              Collections[]

  @@map("users")
}

enum ConjurationVisibility {
  PUBLIC
  PRIVATE
}

model Conjuration {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId               Int?
  campaignId           Int?
  conjurationRequestId Int?

  name                  String
  visibility            ConjurationVisibility @default(PUBLIC)
  conjurerCode          String
  imageUri              String?
  imageAIPrompt         String?
  dataBackup            Json?
  data                  Json
  tags                  String[]
  imageGenerationFailed Boolean               @default(false)
  prompt                String?

  user                   User?                   @relation(fields: [userId], references: [id])
  campaign               Campaign?               @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  conjurationRequest     ConjurationRequest?     @relation(fields: [conjurationRequestId], references: [id])
  saves                  ConjurationSave[]
  images                 Image[]
  collectionConjurations CollectionConjuration[]
  campaignConjuration    CampaignConjuration[]

  @@map("conjurations")
}

enum ConjurationRelationshipType {
  CAMPAIGN
  SESSION
  CHARACTER
  CONJURATION
}

model ConjurationRelationships {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  previousNodeId Int
  previousType   ConjurationRelationshipType
  nextNodeId     Int
  nextType       ConjurationRelationshipType
  comment        String?
  data           Json?
  userId         Int

  user User @relation(fields: [userId], references: [id])

  @@index([previousNodeId], name: "conjuration_relationships_previous_node_id")
  @@index([nextNodeId], name: "conjuration_relationships_next_node_id")
  @@index([nextType], name: "conjuration_relationships_next_type")
  @@index([previousType], name: "conjuration_relationships_previous_type")
  @@index([nextType, nextNodeId], name: "conjuration_relationships_next_type_next_node_id")
  @@index([previousType, previousNodeId], name: "conjuration_relationships_previous_type_previous_node_id")
  @@map("conjuration_relationships")
}

model ConjurationSave {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId        Int
  conjurationId Int

  user        User        @relation(fields: [userId], references: [id])
  conjuration Conjuration @relation(fields: [conjurationId], references: [id])

  @@unique([userId, conjurationId])
  @@map("conjuration_users")
}

model ConjurationRequest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId              Int
  campaignId          Int
  generatorCode       String
  count               Int
  args                Json
  prompt              String?
  imagePrompt         String?
  imageNegativePrompt String?
  imageStylePreset    String?

  user         User?         @relation(fields: [userId], references: [id])
  conjurations Conjuration[]

  @@map("conjuration_requests")
}

model Campaign {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId    Int
  deleted   Boolean   @default(false)

  name                String
  description         String?
  rpgSystemCode       String
  publicAdventureCode String?
  openAiConfig        Json?

  user                 User                  @relation(fields: [userId], references: [id])
  sessions             Session[]
  conjurations         Conjuration[]
  members              CampaignMember[]
  characters           Character[]
  inviteCode           String?               @default(dbgenerated("(gen_random_uuid())::text"))
  campaignConjurations CampaignConjuration[]
  collections          Collections[]

  @@map("campaigns")
}

model Session {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId     Int
  campaignId Int
  processing Boolean   @default(false)
  completed  Boolean   @default(false)
  archived   Boolean   @default(false)
  isOver     Boolean   @default(false)

  summary                  String?
  transcript               Json?
  transcriptSpeakerMapping Json?
  transcriptExternalId     String?
  planning                 String?
  recap                    String?
  imageUri                 String?
  suggestions              String?
  name                     String?
  audioName                String?
  audioUri                 String?
  planningJson             Json?
  date                     DateTime? @db.Timestamptz(6)

  suggestedName        String?
  suggestedSummary     String?
  suggestedSuggestions String?
  suggestedImagePrompt String?
  suggestedImageUri    String?
  suggestedRecap       String?

  user                 User                  @relation(fields: [userId], references: [id])
  campaign             Campaign              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  sessionTranscription SessionTranscription?
  images               Image[]

  @@map("sessions")
}

model Tag {
  name      String    @id
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  usageCount Int

  @@unique([name])
  @@index([name], name: "tags_name")
  @@map("tags")
}

model CampaignMember {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId     Int?
  campaignId Int
  role       Int
  email      String?
  inviteCode String?
  joinedAt   DateTime? @db.Timestamptz(6)

  user      User?       @relation(fields: [userId], references: [id])
  campaign  Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  character Character[]

  @@unique([userId, campaignId])
  @@unique([inviteCode])
  @@index([campaignId], name: "campaign_members_campaign_id")
  @@map("campaign_members")
}

model Character {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  campaignMemberId Int?
  userId           Int
  campaignId       Int?

  name        String
  age         Int
  race        String
  class       String
  imageUri    String?
  backstory   String?
  personality String?
  looks       String?
  goals       String?
  alignment   String?

  customData Json?

  user           User            @relation(fields: [userId], references: [id])
  campaign       Campaign?       @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignMember CampaignMember? @relation(fields: [campaignMemberId], references: [id], onDelete: SetNull)
  images         Image[]

  @@index([campaignMemberId], name: "characters_campaign_member_id")
  @@map("characters")
}

model Image {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId         Int
  uri            String?
  prompt         String
  negativePrompt String?
  stylePreset    String?
  seed           String?
  primary        Boolean @default(false)
  upscaled       Boolean @default(false)
  generating     Boolean @default(false)
  failed         Boolean @default(false)

  conjurationId Int?
  sessionId     Int?
  characterId   Int?
  modelId       Int?

  user        User         @relation(fields: [userId], references: [id])
  conjuration Conjuration? @relation(fields: [conjurationId], references: [id], onDelete: SetNull)
  session     Session?     @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  character   Character?   @relation(fields: [characterId], references: [id], onDelete: SetNull)
  imageModel  ImageModel?  @relation(fields: [modelId], references: [id], onDelete: SetNull)

  @@index([userId], name: "images_user_id")
  @@map("images")
}

model MagicLink {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId                  Int
  token                   String   @unique
  expiresAt               DateTime
  inviteCode              String?
  signupConjurationPrompt String?
  conjurationRequestId    Int?

  user User @relation(fields: [userId], references: [id])

  @@index([token], name: "magic_links_token")
  @@map("magic_links")
}

model SessionTranscription {
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  sessionId     Int     @id @unique
  userId        Int
  callId        String?
  status        String?
  transcription Json?

  user    User?    @relation(fields: [userId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])

  @@map("session_transcriptions")
}

enum ImageCreditChangeType {
  PURCHASE
  SUBSCRIPTION
  SUPPORT
  USER_INITIATED
  TRIAL
}

model ImageCreditAuditLog {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId   Int
  quantity Int
  type     ImageCreditChangeType
  comment  String?

  user User? @relation(fields: [userId], references: [id])

  @@map("image_credit_audit_log")
}

model ProcessedStripeEvents {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  eventId   String    @unique
  data      Json

  @@map("processed_stripe_events")
}

model Artist {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  name        String
  description String?
  email       String?

  profilePicUri   String?
  callToActionUri String?
  dataCardUri     String?

  profileImageUris String[]

  ImageModelArtist ImageModelArtist[]

  @@map("artists")
}

model ImageModel {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  description     String
  strengths       String[]
  promptPrefix    String?
  sampleImageUris String[]
  executionUri    String?
  defaultSteps    Int      @default(70)

  licensedArt             Boolean @default(false)
  default                 Boolean @default(false)
  stableDiffusionApiModel Boolean @default(false)
  paysRoyalties           Boolean @default(false)

  loraName String?

  artists ImageModelArtist[]
  images  Image[]

  @@map("image_models")
}

model ImageModelArtist {
  imageModelId Int
  artistId     Int

  artist Artist?     @relation(fields: [artistId], references: [id])
  model  ImageModel? @relation(fields: [imageModelId], references: [id])

  @@id([imageModelId, artistId])
  @@map("image_model_artists")
}

model Collections {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt          DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  name               String
  parentCollectionId Int?
  userId             Int
  campaignId         Int

  user                   User                    @relation(fields: [userId], references: [id])
  collectionConjurations CollectionConjuration[]
  campaign               Campaign                @relation(fields: [campaignId], references: [id])

  @@index([id], name: "collections_id")
  @@index([parentCollectionId], name: "collections_parent_collection_id")
  @@map("collections")
}

model CollectionConjuration {
  collectionId  Int
  conjurationId Int

  collection  Collections @relation(fields: [collectionId], references: [id])
  conjuration Conjuration @relation(fields: [conjurationId], references: [id])

  @@id([collectionId, conjurationId])
  @@index([collectionId], name: "collection_conjurations_collection_id")
  @@index([conjurationId], name: "collection_conjurations_conjuration_id")
  @@index([collectionId, conjurationId], name: "collection_conjurations_collection_id_conjuration_id")
  @@map("collection_conjurations")
}

enum ContextType {
  CAMPAIGN
  SESSION
  SESSION_TRANSCRIPTION
  CONJURATION
  MANUAL_FILE_UPLOAD
}

model ContextFiles {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  type                 ContextType
  filename             String
  uri                  String?
  externalSystemFileId String      @unique

  campaignId    Int
  sessionId     Int?
  conjurationId Int?

  @@map("openai_context_files")
}

model CampaignConjuration {
  campaignId    Int
  conjurationId Int

  campaign    Campaign    @relation(fields: [campaignId], references: [id])
  conjuration Conjuration @relation(fields: [conjurationId], references: [id])

  @@id([campaignId, conjurationId])
  @@index([campaignId], name: "campaign_conjurations_campaign_id")
  @@index([conjurationId], name: "campaign_conjurations_conjuration_id")
  @@index([campaignId, conjurationId], name: "campaign_conjurations_campaign_id_conjuration_id")
  @@map("campaign_conjurations")
}
