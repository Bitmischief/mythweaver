generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt    DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  refreshToken String    @unique
  expiresAt    DateTime
  userId       Int

  user User @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  email     String    @unique

  refreshTokens       RefreshToken[]
  campaigns           Campaign[]
  sessions            Session[]
  conjurations        Conjuration[]
  conjurationRequests ConjurationRequest[]
  campaignMemberships CampaignMember[]
  characters          Character[]

  @@map("users")
}

model Conjuration {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  originalId           Int?
  userId               Int?
  campaignId           Int?
  conjurationRequestId Int?

  name          String
  conjurerCode  String
  imageUri      String?
  imageAIPrompt String?
  data          Json
  tags          String[]

  user               User?               @relation(fields: [userId], references: [id])
  campaign           Campaign?           @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  original           Conjuration?        @relation("OriginalConjuration", fields: [originalId], references: [id])
  copies             Conjuration[]       @relation("OriginalConjuration")
  conjurationRequest ConjurationRequest? @relation(fields: [conjurationRequestId], references: [id])

  @@map("conjurations")
}

model ConjurationRequest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  userId        Int
  campaignId    Int
  generatorCode String
  count         Int
  args          Json

  user         User?         @relation(fields: [userId], references: [id])
  conjurations Conjuration[]

  @@map("conjuration_requests")
}

model Campaign {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId    Int

  name                String
  description         String?
  rpgSystemCode       String
  publicAdventureCode String?

  user         User             @relation(fields: [userId], references: [id])
  sessions     Session[]
  conjurations Conjuration[]
  members      CampaignMember[]
  characters   Character[]

  @@map("campaigns")
}

model Session {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt  DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  userId     Int
  campaignId Int

  when        DateTime
  status      Int      @default(1)
  summary     String?
  transcript  String?
  description String?
  recap       String?
  imageUri    String?
  suggestions String?
  name        String?

  user     User     @relation(fields: [userId], references: [id])
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Tag {
  name      String    @id
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)

  usageCount Int

  @@unique([name])
  @@index([name], name: "tags_name")
  @@map("tags")
}

model CampaignMember {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)"))

  userId     Int?
  campaignId Int
  role       Int
  email      String?
  inviteCode String?
  joinedAt   DateTime? @db.Timestamptz(6)

  user      User?      @relation(fields: [userId], references: [id])
  campaign  Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  character Character?

  @@unique([userId, campaignId])
  @@unique([inviteCode])
  @@index([campaignId], name: "campaign_members_campaign_id")
  @@map("campaign_members")
}

model Character {
  id        Int       @id @default(autoincrement())
  createdAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)"))

  campaignMemberId Int?
  userId           Int
  campaignId       Int?

  name        String
  imageUri    String?
  backstory   String?
  personality String?
  goals       String?
  alignment   String?

  customData Json

  user           User            @relation(fields: [userId], references: [id])
  campaign       Campaign?       @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignMember CampaignMember? @relation(fields: [campaignMemberId], references: [id], onDelete: SetNull)

  @@unique([campaignMemberId])
  @@unique([userId, campaignId])
  @@index([userId, campaignId], name: "characters_user_id_campaign_id")
  @@index([campaignMemberId], name: "characters_campaign_member_id")
  @@map("characters")
}
